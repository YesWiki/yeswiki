#!/usr/bin/env php
<?php
// application.php

namespace YesWiki\AutoUpdate\Commands;

if (!file_exists('wakka.config.php')) {
  exit("\e[31mThe command should be launched from your YesWiki root directory\e[0m");
} else {
  include_once('wakka.config.php');
  // fake $_SERVER vars
  $_SERVER['REQUEST_URI'] = $wakkaConfig['base_url'].$wakkaConfig['root_page'];
  $_SERVER['HTTP_HOST'] = parse_url($wakkaConfig['base_url'], PHP_URL_HOST);
  $_SERVER['REQUEST_METHOD'] = 'GET';
  // fake wiki page
  $_REQUEST['wiki'] = $wakkaConfig['root_page'];
}

use Doctrine\Common\Annotations\AnnotationRegistry;

spl_autoload_register(function ($className) {
    $classNameArray = explode('\\', $className);
    // Autoload services
    if (isset($classNameArray[2])) {
        if ($classNameArray[1] === 'Core') {
            if ($classNameArray[2] === 'Service') {
                require 'includes/services/' . $classNameArray[3] . '.php';
            } elseif ($classNameArray[2] === 'Controller') {
                require 'includes/controllers/' . $classNameArray[3] . '.php';
            } elseif (file_exists('includes/' . $classNameArray[2] . '.php')) {
                require 'includes/' . $classNameArray[2] . '.php';
            }
        } else {
            $extension = strtolower($classNameArray[1]);
            if ($classNameArray[2] === 'Service') {
                require 'tools/' . $extension . '/services/' . $classNameArray[3] . '.php';
            } elseif ($classNameArray[2] === 'Field') {
                if ($extension == 'custom') {
                    require 'custom/fields/' . $classNameArray[3] . '.php';
                } else {
                    require 'tools/' . $extension . '/fields/' . $classNameArray[3] . '.php';
                }
            } elseif ($classNameArray[2] === 'Controller') {
                require 'tools/' . $extension . '/controllers/' . $classNameArray[3] . '.php';
            } elseif ($classNameArray[2] === 'Commands') {
                require 'tools/' . $extension . '/commands/' . $classNameArray[3] . '.php';
            }
        }
    }
});

$loader = require_once 'vendor/autoload.php';
AnnotationRegistry::registerLoader([$loader, 'loadClass']);
require_once __DIR__.'/../vendor/autoload.php';

use Symfony\Component\Console\Application;

$application = new Application();

require_once 'includes/YesWiki.php';
$wiki = new \YesWiki\Wiki();

// little hack to understand that we are lauching a cli command
$wiki->config['is_cli'] = true;

// second little hack (bad habit..): we use the first admin user to perform updates as an admin
$admins = $wiki->GetGroupACL('admins');
$firstAdmin = $wiki->LoadUser(explode("\r\n", $admins)[0]);
$wiki->setUser($firstAdmin);

// ... register commands
use YesWiki\AutoUpdate\Commands\UpdaterCommand;
$application->add(new UpdaterCommand($wiki));

use YesWiki\AutoUpdate\Commands\PostUpdaterCommand;
$application->add(new PostUpdaterCommand($wiki));

$application->run();
